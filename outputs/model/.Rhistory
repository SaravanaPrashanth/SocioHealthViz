labs(x="Year", y="GDP per capita growth (annual %)", colour="Country")
ggplot(country_data)+geom_point(aes(income, SP.DYN.LE00.IN, colour = country))+
labs(x="Year", y="GDP per capita growth (annual %)", colour="Country")
ggplot(country_data)+geom_point(aes(income, SP.DYN.LE00.IN, colour = country))+
labs(x="Year", y="Life expectancy", colour="Country")
ggplot(country_data)+geom_point(aes(income, SP.DYN.LE00.IN, colour = country))+
labs(x="Income range", y="Life expectancy", colour="Country")
ggplot(country_data)+geom_point(aes(income, SP.DYN.LE00.IN, colour = country, shape = region))+
labs(x="Income range", y="Life expectancy", colour="Country")
library(WDI)
library(tidyverse)
new_wdi_cache = WDIcache()
country_data = WDI(country=c("GB","FR","ES","IT","NL", "CN","AE","IN","JO","US"),
indicator = c("NY.GDP.PCAP.KD","NY.GDP.PCAP.KD.ZG",
"SP.POP.TOTL","SP.DYN.LE00.IN"),
start=2000, end=2019,
extra=TRUE,
cache = new_wdi_cache)
View(country_data)
ggplot(country_data)+geom_point(aes(year, NY.GDP.PCAP.KD.ZG), colour="#FF0000")+
labs(x="Year", y="GDP Per Capita Growth (annual %")
ggplot(country_data)+geom_point(aes(year, NY.GDP.PCAP.KD.ZG), colour="#FF0000")+
labs(x="Year", y="GDP Per Capita Growth (annual %)")
#can also use rgb and hsv
ggplot(country_data)+geom_point(aes(year, NY.GDP.PCAP.KD.ZG), colour=rgb(0.8,0.2,0.5))+
labs(x="Year", y="GDP Per Capita Growth (annual %)")
ggplot(country_data)+geom_point(aes(year, NY.GDP.PCAP.KD.ZG), colour="#FF0000")+
labs(x="Year", y="GDP Per Capita Growth (annual %)") #using hex code in colour
#can also use rgb and hsv
ggplot(country_data)+geom_point(aes(year, NY.GDP.PCAP.KD.ZG), colour=rgb(0.8,0.2,0.5))+
labs(x="Year", y="GDP Per Capita Growth (annual %)")
ggplot(country_data)+geom_point(aes(year, SP.DYN.LE00.IN), colour="steelblue")+
labs(x="Year", y="Life expectancy")
#Create theplot using the different ways we have seen to represent the colour: colourname,hexadecimalcode, the rgb()and
#the hsv() functions.
ggplot(country_data)+geom_point(aes(year, SP.DYN.LE00.IN), colour="steelblue")+
labs(x="Year", y="Life expectancy")
ggplot(country_data)+geom_point(aes(year, SP.DYN.LE00.IN), colour=rgb(0.7,1.3,1.8))+
labs(x="Year", y="Life expectancy")
ggplot(country_data)+geom_point(aes(year, SP.DYN.LE00.IN), colour=rgb(0.7,0.13,0.18))+
labs(x="Year", y="Life expectancy")
ggplot(country_data)+geom_point(aes(year, SP.DYN.LE00.IN), colour=rgb(0.18,0.34,0.47))+
labs(x="Year", y="Life expectancy")
ggplot(country_data)+geom_point(aes(year, SP.DYN.LE00.IN), colour=hsv(0.57, 0.16, 0.19))+
labs(x="Year", y="Life expectancy")
ggplot(country_data)+geom_point(aes(year, SP.DYN.LE00.IN), colour=hsv(0.57, 0.17, 0.20))+
labs(x="Year", y="Life expectancy")
ggplot(country_data)+geom_point(aes(year, NY.GDP.PCAP.KD.ZG), colour=income)+
scale_colour_brewer(palette = 'Dark2')+
labs(x="Year", y="GDP Per Capita Growth(annual%)"), colour="Income\nlevel"
ggplot(country_data)+geom_point(aes(year, NY.GDP.PCAP.KD.ZG), colour=income)+
scale_colour_brewer(palette = 'Dark2')+
labs(x="Year", y="GDP Per Capita Growth(annual%)", colour="Income\nlevel")
ggplot(country_data)+geom_point(aes(year, NY.GDP.PCAP.KD.ZG, colour=income))+
scale_colour_brewer(palette = 'Dark2')+
labs(x="Year", y="GDP Per Capita Growth(annual%)", colour="Income\nlevel")
#for colour blind people this can be used
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+geom_point(aes(colour = NY.GDP.PCAP.KD.ZG))+
scale_color_viridis_c()+
labs(x="Year", y="GDP per capita growth(annual %)", colour="Life\nExpectancy")
ggplot(country_data, aes(NY.GDP.PCAP.KD, SP.DYN.LE00.IN))+
geom_point(aes(colour = SP.POP.TOTL))+
scale_colour_continuous()+
labs(x="GDP Per Capita Growth(annual %)", y="Population", colour="Population\nTotal")
ggplot(country_data, aes(NY.GDP.PCAP.KD, SP.DYN.LE00.IN))+
geom_point(aes(colour = SP.POP.TOTL))+
scale_colour_continuous()+
labs(x="GDP Per Capita Growth(annual %)", y="Population")
ggplot(country_data, aes(NY.GDP.PCAP.KD, SP.DYN.LE00.IN))+
geom_point(aes(colour = SP.POP.TOTL))+
scale_colour_continuous()+
labs(x="GDP Per Capita Growth(annual %)", y="Population", colour="Population\nTotal")
ggplot(country_data, aes(NY.GDP.PCAP.KD, SP.DYN.LE00.IN))+
geom_point(aes(colour = SP.POP.TOTL))+
scale_colour_discrete() +
labs(x="GDP Per Capita Growth(annual %)", y="Population", colour="Population\nTotal")
ggplot(country_data, aes(NY.GDP.PCAP.KD, SP.DYN.LE00.IN))+
geom_point(aes(colour = NY.GDP.PCAP.KD))+
scale_colour_discrete() +
labs(x="GDP Per Capita Growth(annual %)", y="Population", colour="Population\nTotal")
ggplot(country_data, aes(NY.GDP.PCAP.KD, SP.DYN.LE00.IN))+
geom_point(aes(colour = income))+
scale_colour_discrete() +
labs(x="GDP Per Capita Growth(annual %)", y="Population", colour="Population\nTotal")
ggplot(country_data, aes(NY.GDP.PCAP.KD, SP.DYN.LE00.IN))+
geom_point(aes(colour = SP.DYN.LE00.IN))+
scale_colour_continuous() +
labs(x="GDP Per Capita Growth(annual %)", y="Population", colour="Population\nTotal")
#using title,sub-title,caption,tag
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+
geom_point(aes(colour = SP.DYN.LE00.IN))+
scale_color_viridis_c()+
labs(x="Year", y="GDP Per Capita Growth(annual %)", colour="Life\nExpectancy",
title = "Test title", subtitle = "Test Sub-title",
caption = "World Development Indicators, World Bank", tag="A")
#using title,sub-title,caption,tag
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+
geom_point(aes(colour = SP.DYN.LE00.IN))+
scale_color_viridis_c()+
labs(x="Year", y="GDP Per Capita Growth(annual %)", colour="Life\nExpectancy",
title = "Test title", subtitle = "Test Sub-title",
caption = "World Development Indicators, Saravana", tag="A")
#using title,sub-title,caption,tag
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+
geom_point(aes(colour = SP.DYN.LE00.IN))+
scale_color_viridis_c()+
labs(x="Year", y="GDP Per Capita Growth(annual %)", colour="Life\nExpectancy",
title = "Corelation of GDP and Life Expectancy", subtitle = "Test Sub-title",
caption = "World Development Indicators, Saravana", tag="A")
#using title,sub-title,caption,tag
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+
geom_point(aes(colour = SP.DYN.LE00.IN))+
scale_color_viridis_c()+
labs(x="Year", y="GDP Per Capita Growth(annual %)", colour="Life\nExpectancy",
title = "Corelation of GDP and Life Expectancy", subtitle = "GPD influencing Life",
caption = "World Development Indicators, Saravana", tag="A")
#using title,sub-title,caption,tag
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+
geom_point(aes(colour = SP.DYN.LE00.IN))+
scale_color_viridis_c()+
labs(x="Year", y="GDP Per Capita Growth(annual %)", colour="Life\nExpectancy",
title = "Corelation of GDP and Life Expectancy", subtitle = "GPD influencing Life",
caption = "World Development Indicators, Saravana", tag="A)")
#using faceting that too on X-Axis
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+geom_point(aes(colour = country))+
facet_grid(. ~ income)+
labs(x="Year", y="GDP Per Capita Growth(annual %)", colour="Country",
title="Faceting test", subtitle = "Facet on X-axis", caption="WDI, Saravana")
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+geom_point(aes(colour= region))+
facet_grid(region ~ .)+
labs(x="Year", y="GDP Per Capita Growth(annual %)", colour="Country",
title="Faceting test", subtitle = "Facet on Y-axis", caption="WDI, Saravana")
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+geom_point(aes(colour= country))+
facet_grid(region ~ .)+
labs(x="Year", y="GDP Per Capita Growth(annual %)", colour="Country",
title="Faceting test", subtitle = "Facet on Y-axis", caption="WDI, Saravana")
#using faceting on both the axis
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+geom_point(aes(colour= country))+
facet_grid(region ~ income)+
labs(x="Year", y="GDP Per Capita Growth(annual %)", colour="Country",
title="Faceting test", subtitle = "Facet on Y-axis", caption="WDI, Saravana")
#using faceting on both the axis
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+geom_point(aes(colour= country))+
facet_grid(region ~ income)+
labs(x="Year", y="GDP Per Capita Growth(annual %)", colour="Country",
title="Faceting test", subtitle = "Facet on both axes", caption="WDI, Saravana")
#split the x-axis based on sequencing using scale_x_continuous
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+geom_point(aes(colour= country))+
facet_grid(region ~ income)+
labs(x="Year", y="GDP Per Capita Growth(annual %)", colour="Country",
title="Faceting test", subtitle = "Facet on both axes", caption="WDI, Saravana")+
scale_x_continuous(breaks = seq(2000, 2020, 10))
#save the plot to a file
filename = "test_image.png"
ggsave(filename)
library(WDI)
library(tidyverse)
new_wdi_cache = WDIcache()
country_data = WDI(country=c("GB","FR","ES","IT","NL", "CN","AE","IN","JO","US"),
indicator = c("NY.GDP.PCAP.KD","NY.GDP.PCAP.KD.ZG",
"SP.POP.TOTL","SP.DYN.LE00.IN"),
start=2000, end=2019,
extra=TRUE,
cache = new_wdi_cache)
View(country_data)
new_wdi_cache = WDIcache()
country_data = WDI(country=c("GB","FR","ES","IT","NL", "CN","AE","IN","JO","US"),
indicator = c("NY.GDP.PCAP.KD","NY.GDP.PCAP.KD.ZG",
"SP.POP.TOTL","SP.DYN.LE00.IN"),
start=2000, end=2019,
extra=TRUE,
cache = new_wdi_cache)
View(country_data)
ggplot(country_data)+geom_point(aes(year, NY.GDP.PCAP.KD.ZG), colour="#FF0000")+
labs(x="Year", y="GDP Per Capita Growth (annual %)") #using hex code in colour
#can also use rgb and hsv
ggplot(country_data)+geom_point(aes(year, NY.GDP.PCAP.KD.ZG), colour=rgb(0.8,0.2,0.5))+
labs(x="Year", y="GDP Per Capita Growth (annual %)")
#Create theplot using the different ways we have seen to represent the colour: colourname,hexadecimalcode, the rgb()and
#the hsv() functions.
ggplot(country_data)+geom_point(aes(year, SP.DYN.LE00.IN), colour="steelblue")+
labs(x="Year", y="Life expectancy")
#using rgb
ggplot(country_data)+geom_point(aes(year, SP.DYN.LE00.IN), colour=rgb(0.18,0.34,0.47))+
labs(x="Year", y="Life expectancy")
#using hsv
ggplot(country_data)+geom_point(aes(year, SP.DYN.LE00.IN), colour=hsv(0.57, 0.17, 0.20))+
labs(x="Year", y="Life expectancy") #not able to create the same color using hsv value
#using scale_XXX_brewer to modify the colour in palette system like Dark2, Blues
ggplot(country_data)+geom_point(aes(year, NY.GDP.PCAP.KD.ZG, colour=income))+
scale_colour_brewer(palette = 'Dark2')+
labs(x="Year", y="GDP Per Capita Growth(annual%)", colour="Income\nlevel")
#for color blind people this can be used viridis_c - for continuous variable, viridis_d - for discrete variable
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+geom_point(aes(colour = NY.GDP.PCAP.KD.ZG))+
scale_color_viridis_c()+
labs(x="Year", y="GDP per capita growth(annual %)", colour="Life\nExpectancy")
#using scale_XXX_brewer to modify the colour in palette system like Dark2, Blues
ggplot(country_data)+geom_point(aes(year, NY.GDP.PCAP.KD.ZG, colour=income))+
scale_colour_brewer(palette = 'Dark2')+
labs(x="Year", y="GDP Per Capita Growth(annual%)", colour="Income\nlevel")
#for color blind people this can be used viridis_c - for continuous variable, viridis_d - for discrete variable
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+geom_point(aes(colour = NY.GDP.PCAP.KD.ZG))+
scale_color_viridis_c()+
labs(x="Year", y="GDP per capita growth(annual %)", colour="Life\nExpectancy")
ggplot(country_data, aes(NY.GDP.PCAP.KD, SP.DYN.LE00.IN))+
geom_point(aes(colour = income))+
scale_colour_discrete() +
labs(x="GDP Per Capita Growth(annual %)", y="Population", colour="Population\nTotal")
ggplot(country_data, aes(NY.GDP.PCAP.KD, SP.DYN.LE00.IN))+
geom_point(aes(colour = SP.DYN.LE00.IN))+
scale_colour_continuous() +
labs(x="GDP Per Capita Growth(annual %)", y="Population", colour="Population\nTotal")
#for color blind people this can be used viridis_c - for continuous variable, viridis_d - for discrete variable
ggplot(country_data, aes(year, NY.GDP.PCAP.KD.ZG))+geom_point(aes(colour = NY.GDP.PCAP.KD.ZG))+
scale_color_viridis_c()+
labs(x="Year", y="GDP per capita growth(annual %)", colour="Life\nExpectancy")
ggplot(country_data, aes(NY.GDP.PCAP.KD, SP.DYN.LE00.IN))+
geom_point(aes(colour = income))+
scale_colour_discrete() +
labs(x="GDP Per Capita Growth(annual %)", y="Population", colour="Population\nTotal")
ggplot(country_data, aes(NY.GDP.PCAP.KD, SP.DYN.LE00.IN))+
geom_point(aes(colour = SP.DYN.LE00.IN))+
scale_colour_continuous() +
labs(x="GDP Per Capita Growth(annual %)", y="Population", colour="Population\nTotal")
ggplot(mpg, aes(manufacturer)) + geom_bar() +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
ggplot(mpg, aes(manufacturer)) + geom_bar(width = 0.5) + labs(x="Manufacturer",
y="Frequency",
title="Number of cars releases",
caption="mpg dataset")
ggplot(mpg, aes(manufacturer)) + geom_bar(width = 0.5) +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",caption="mpg dataset")
#geom_bar by default uses the count_stat
df = mpg %>% group_by(manufacturer) %>% summarise(count = n())
ggplot(df, aes(manufacturer, count)) + geom_bar() +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
ggplot(df, aes(manufacturer, count)) + geom_bar(stat="identity") +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
ggplot(df, aes(manufacturer, count)) + geom_bar(stat="identity", width=0.5) +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
#create stacked-bar chart
ggplot(mpg, aes(manufacturer)) + geom_bar(aes(fill = drv)) +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases", fill="Drive\ntype"
caption="mpg dataset")
#create stacked-bar chart
ggplot(mpg, aes(manufacturer)) + geom_bar(aes(fill = drv)) +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases", fill="Drive\ntype",
caption="mpg dataset")
#create stacked-bar chart
ggplot(mpg, aes(manufacturer)) + geom_bar(aes(fill = drv), width=0.5) +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases", fill="Drive\ntype",
caption="mpg dataset")
#create stacked-bar chart,add fill=drv in geom_bar(aes())
ggplot(mpg, aes(manufacturer)) + geom_bar(aes(fill = drv), width=0.5) +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases", fill="Drive\ntype",
caption="mpg dataset")
ggplot(mpg, aes(manufacturer)) + geom_bar(aes(fill = drv),
position = position_dodge(preserve = "single"))+
labs(x="Manufacturer", y="Frequency", title="Number of cars releases", fill="Drive\ntype",
caption="mpg dataset")
View(mpg)
#exercise
ggplot(mpg, aes(cyl)) + geom_bar() +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
#exercise
ggplot(mpg, aes(cyl)) + geom_bar() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset")
ggplot(mpg, aes(cyl)) + geom_bar(aes(fill = drv), width=0.5) +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset")
ggplot(mpg, aes(cyl)) + geom_bar(aes(fill = fl), width=0.5) +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset")
#exercise
ggplot(mpg, aes(manufacturer, cyl)) + geom_bar() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset")
#exercise
ggplot(mpg, aes(manufacturer, cyl)) + geom_bar(stat="identity") +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset")
#exercise
ggplot(mpg, aes(cyl)) + geom_bar(stat="identity") +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset")
#exercise
ggplot(mpg, aes(cyl)) + geom_bar() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset")
ggplot(df1, aes(cyl, count)) + geom_bar() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset")
#exercise
df1 = mpg %>% group_by(cyl) %>% summarise(count=n())
ggplot(df1, aes(cyl, count)) + geom_bar() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset")
ggplot(df1, aes(cyl, count)) + geom_bar(stat="identity") +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset")
ggplot(mpg, aes(cyl)) + geom_bar(aes(fill = fl), width=0.5) +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset")
ggplot(mpg, aes(cyl)) + geom_bar(aes(fill=fl),
position=position_dodge(preserve = "single"))+
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset")
#exercise
#df1 = mpg %>% group_by(cyl) %>% summarise(count=n())
ggplot(mpg, aes(x=factor(cyl))) + geom_bar() +
labs(x="Cylinders", y="Count", title="Number of cylinders",
caption="mpg dataset")
#stacked
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill = fl), width=0.5) +
labs(x="Cylinders", y="Frequency", title="Number of cylinders by Fuel Type",
caption="mpg dataset", fill="Fuel Type")
#clustered
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=fl),
position=position_dodge(preserve = "single"))+
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset", fill="Fuel Type")
#create clustered chart,add position=position_dodge(preserve="single") in geom_bar(aes())
ggplot(mpg, aes(manufacturer)) + geom_bar(aes(fill = drv),
position = position_dodge(preserve = "single"))+
labs(x="Manufacturer", y="Frequency", title="Number of cars releases", fill="Drive\ntype",
caption="mpg dataset")
#clustered
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=fl),
position=position_dodge(preserve = "single"))+
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset", fill="Fuel Type")
ggplot(mpg, aes(manufacturer)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
ggplot(mpg, aes(manufacturer)) + geom_bar(width=0.5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
ggplot(mpg, aes(manufacturer)) + geom_bar(width=0.5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset") + theme_minimal()
ggplot(mpg, aes(manufacturer)) + geom_bar(width=0.5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
ggplot(mpg, aes(manufacturer)) + geom_bar(width=0.5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ theme_bw() +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
#using theme_bw to change the background of the plot and the axes
ggplot(mpg, aes(manufacturer)) + geom_bar(width=0.5) + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
theme_bw() +
#using theme_bw to change the background of the plot and the axes
ggplot(mpg, aes(manufacturer)) + geom_bar(width=0.5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ theme_bw() +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
#using theme_bw to change the background of the plot and the axes
ggplot(mpg, aes(manufacturer)) + geom_bar(width=0.5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ theme_bw() +
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
#using theme_bw to change the background of the plot and the axes
ggplot(mpg, aes(manufacturer)) + geom_bar(width=0.5) + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x="Manufacturer", y="Frequency", title="Number of cars releases",
caption="mpg dataset")
#exercise 2.1
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=fl),
position=position_dodge(preserve = "single"))+
theme_gray() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset", fill="Fuel Type")
#exercise 2.1
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=fl),
position=position_dodge(preserve = "single"))+
theme_grey() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset", fill="Fuel Type")
#exercise 2.1
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=fl),
position=position_dodge(preserve = "single"))+
theme_linedraw() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset", fill="Fuel Type")
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=fl),
position=position_dodge(preserve = "single"))+
theme_dark() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset", fill="Fuel Type")
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=fl),
position=position_dodge(preserve = "single"))+
theme_void() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset", fill="Fuel Type")
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=fl),
position=position_dodge(preserve = "single"))+
theme_test() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset", fill="Fuel Type")
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=fl),
position=position_dodge(preserve = "single"))+
theme_classic() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset", fill="Fuel Type")
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=fl),
position=position_dodge(preserve = "single"))+
theme_void() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset", fill="Fuel Type")
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=fl),
position=position_dodge(preserve = "single"))+
theme_minimal() +
labs(x="Cylinders", y="Frequency", title="Number of cylinders",
caption="mpg dataset", fill="Fuel Type")
gc()
library(ggplot2)
# Overall data
overall_data <- data.frame(
Gender = c("Male", "Female"),
Admission_Rate = c(45.8, 51.5)
)
# Bar chart for overall admission rates
ggplot(overall_data, aes(x = Gender, y = Admission_Rate, fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Overall Admission Rates", x = "Gender", y = "Admission Rate (%)") +
theme_minimal()
# Bar chart for department-wise admission rates
ggplot(dept_data, aes(x = Department, y = Admission_Rate, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Department-wise Admission Rates", x = "Department", y = "Admission Rate (%)") +
theme_minimal()
# Department-wise data
dept_data <- data.frame(
Department = rep(c("A", "B", "C", "D", "E", "F"), each = 2),
Gender = rep(c("Male", "Female"), times = 6),
Admission_Rate = c(40, 80, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50)
)
# Bar chart for department-wise admission rates
ggplot(dept_data, aes(x = Department, y = Admission_Rate, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Department-wise Admission Rates", x = "Department", y = "Admission Rate (%)") +
theme_minimal()
# Overall data
overall_data <- data.frame(
Gender = c("Male", "Female"),
Admission_Rate = c(45.8, 26.5)
)
# Bar chart for overall admission rates
ggplot(overall_data, aes(x = Gender, y = Admission_Rate, fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Overall Admission Rates", x = "Gender", y = "Admission Rate (%)") +
theme_minimal()
# Department-wise data
dept_data <- data.frame(
Department = rep(c("A", "B", "C", "D", "E", "F"), each = 2),
Gender = rep(c("Male", "Female"), times = 6),
Admission_Rate = c(40, 80, 50, 25, 50, 50, 50, 25, 50, 20, 50, 10)
)
# Bar chart for department-wise admission rates
ggplot(dept_data, aes(x = Department, y = Admission_Rate, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Department-wise Admission Rates", x = "Department", y = "Admission Rate (%)") +
theme_minimal()
# Department-wise data
dept_data <- data.frame(
Department = rep(c("A", "B", "C", "D", "E", "F"), each = 2),
Gender = rep(c("Male", "Female"), times = 6),
Admission_Rate = c(40, 80, 50, 25, 50, 50, 50, 25, 50, 20, 50, 10)
)
# Bar chart for department-wise admission rates
ggplot(dept_data, aes(x = Department, y = Admission_Rate, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Department-wise Admission Rates", x = "Department", y = "Admission Rate (%)") +
theme_minimal()
# Data
overall_data <- data.frame(
Gender = c("Male", "Female"),
AdmissionRate = c(62.1, 34.7) # Calculated overall rates
)
# Plot
ggplot(overall_data, aes(x = Gender, y = AdmissionRate, fill = Gender)) +
geom_bar(stat = "identity", width = 0.7) +
labs(title = "Overall Admission Rates by Gender",
x = "Gender", y = "Admission Rate (%)") +
theme_minimal() +
scale_fill_manual(values = c("Male" = "blue", "Female" = "pink"))
# Data
department_data <- data.frame(
Department = rep(c("A", "B", "C", "D", "E", "F"), each = 2),
Gender = rep(c("Male", "Female"), 6),
AdmissionRate = c(62.1, 82.4, 63.0, 68.0, 36.9, 34.1, 33.1, 34.9, 27.7, 23.9, 5.9, 7.0)
)
# Plot
ggplot(department_data, aes(x = Department, y = AdmissionRate, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
labs(title = "Department-Wise Admission Rates by Gender",
x = "Department", y = "Admission Rate (%)") +
theme_minimal() +
scale_fill_manual(values = c("Male" = "blue", "Female" = "pink"))
setwd("C:/Users/sakth/OneDrive/Desktop/Coursework/Re-work")
